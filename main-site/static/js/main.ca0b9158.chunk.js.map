{"version":3,"sources":["components/Form/ErrorMessage.tsx","components/Form/TextField.tsx","HeartRateForm.tsx","HeartRateCalculator.tsx","index.tsx"],"names":["ErrorMessage","error","undefined","className","TextField","React","forwardRef","ref","id","testId","name","label","placeholder","type","onBlur","onChange","htmlFor","data-testid","schema","yup","shape","age","required","matches","test","value","parseInt","HeartRateForm","onSubmit","useForm","mode","resolver","yupResolver","formState","register","handleSubmit","errors","message","aria-label","HeartRateCalculator","useState","maxHeartRate","setMaxHeartRate","heartRateInput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAMaA,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,YAChBC,IAAVD,EAAsB,qBAAKE,UAAU,aAAf,SAA6BF,IAAe,MCuBvDG,G,OAAYC,IAAMC,YAC7B,WAYEC,GACI,IAXFC,EAWC,EAXDA,GACAC,EAUC,EAVDA,OACAC,EASC,EATDA,KACAC,EAQC,EARDA,MACAC,EAOC,EAPDA,YAOC,IANDC,YAMC,MANM,OAMN,EALDZ,EAKC,EALDA,MACAa,EAIC,EAJDA,OACAC,EAGC,EAHDA,SAIF,OACE,eAAC,WAAD,gBACab,IAAVS,EAAsB,uBAAOK,QAASR,EAAhB,SAAqBG,IAAiB,KAC7D,uBACEH,GAAIA,EACJS,cAAaR,EACbC,KAAMA,EACNE,YAAaA,EACbC,KAAMA,EACNN,IAAKA,EACLJ,UAAU,oBACVW,OAAQA,EACRC,SAAUA,IAEZ,cAAC,EAAD,CAAcd,MAAOA,WCpDvBiB,EAASC,MAAaC,MAAM,CAChCC,IAAKF,MAEFG,WACAC,QAAQ,YAAa,uCACrBC,KAAK,YAAa,iCAAiC,SAACC,GACnD,QAAcvB,IAAVuB,EAAqB,OAAO,EAChC,IAAMJ,EAAMK,SAASD,EAAO,IAC5B,OAAOJ,GAAO,GAAKA,GAAO,SAQnBM,EAAgB,SAAC,GAAsC,IAAD,EAAnCC,EAAmC,EAAnCA,SAAmC,EACnBC,YAAwB,CACpEC,KAAM,SACNC,SAAUC,YAAYd,KAFhBe,EADyD,EACzDA,UAAWC,EAD8C,EAC9CA,SAAUC,EADoC,EACpCA,aAIrBC,EAAWH,EAAXG,OAER,OACE,uBAAMR,SAAUO,EAAaP,GAA7B,UACE,qBAAKzB,UAAU,OAAf,SACE,cAAC,EAAD,yBACEK,GAAG,OACC0B,EAAS,QAFf,IAGEtB,YAAY,iBACZX,MAAK,UAAEmC,EAAOf,WAAT,aAAE,EAAYgB,aAIvB,wBACElC,UAAU,qBACVmC,aAAW,YACXzB,KAAK,SAHP,2BCrCO0B,EAAsB,WAAO,IAAD,EACCC,mBAAS,GADV,mBAChCC,EADgC,KAClBC,EADkB,KAOvC,OACE,gCACE,cAAC,EAAD,CAAed,SANE,SAACe,GACpBD,EAAgB,IAAMC,EAAetB,QAMlCoB,EAAe,EACd,oBAAGtC,UAAU,aAAb,+CACqCsC,EADrC,OAGE,SCdVG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,4B","file":"static/js/main.ca0b9158.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface ErrorMessageProps {\n  error?: string;\n}\n\nexport const ErrorMessage = ({ error }: ErrorMessageProps) =>\n  error !== undefined ? <div className=\"text-error\">{error}</div> : null;\n","import React, { Fragment } from 'react';\nimport { ErrorMessage } from './ErrorMessage';\nimport './TextField.css';\n\nexport interface TextFieldProps {\n  /** used to make label and errorText accessible for screen readers */\n  id?: string;\n\n  /** used to create data-testid property on element for testing */\n  testId?: string;\n\n  /** passed directly to the input element */\n  name?: string;\n\n  /** the label content */\n  label?: React.ReactNode;\n\n  /** placeholder for input */\n  placeholder?: string;\n\n  /** the input type (defaults to text) */\n  type?: string;\n\n  /** error text */\n  error?: string;\n\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  (\n    {\n      id,\n      testId,\n      name,\n      label,\n      placeholder,\n      type = 'text',\n      error,\n      onBlur,\n      onChange,\n    },\n    ref\n  ) => {\n    return (\n      <Fragment>\n        {label !== undefined ? <label htmlFor={id}>{label}</label> : null}\n        <input\n          id={id}\n          data-testid={testId}\n          name={name}\n          placeholder={placeholder}\n          type={type}\n          ref={ref}\n          className=\"text-field__input\"\n          onBlur={onBlur}\n          onChange={onChange}\n        />\n        <ErrorMessage error={error} />\n      </Fragment>\n    );\n  }\n);\n","import React from 'react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { TextField } from './components';\nimport { HeartRateInput } from './HeartRateInput';\n\nconst schema = yup.object().shape({\n  age: yup\n    .string()\n    .required()\n    .matches(/^\\d{1,3}$/, 'age must be 1 to 3 digits in length')\n    .test('age-range', 'age must be between 1 and 128', (value) => {\n      if (value === undefined) return false;\n      const age = parseInt(value, 10);\n      return age >= 1 && age <= 128;\n    }),\n});\n\nexport interface HeartRateFormProps {\n  onSubmit: (heartRateInput: HeartRateInput) => void;\n}\n\nexport const HeartRateForm = ({ onSubmit }: HeartRateFormProps) => {\n  const { formState, register, handleSubmit } = useForm<HeartRateInput>({\n    mode: 'onBlur',\n    resolver: yupResolver(schema),\n  });\n  const { errors } = formState;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"mb-3\">\n        <TextField\n          id=\"age\"\n          {...register('age')}\n          placeholder=\"Enter your age\"\n          error={errors.age?.message}\n        />\n      </div>\n\n      <button\n        className=\"btn-lg w-full mb-3\"\n        aria-label=\"Calculate\"\n        type=\"submit\"\n      >\n        Calculate\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { HeartRateInput } from './HeartRateInput';\nimport { HeartRateForm } from './HeartRateForm';\n\nexport const HeartRateCalculator = () => {\n  const [maxHeartRate, setMaxHeartRate] = useState(0);\n\n  const handleSubmit = (heartRateInput: HeartRateInput) => {\n    setMaxHeartRate(220 - heartRateInput.age);\n  };\n\n  return (\n    <div>\n      <HeartRateForm onSubmit={handleSubmit} />\n      {maxHeartRate > 0 ? (\n        <p className=\"text-error\">\n          Your maximum heart rate should be {maxHeartRate}.\n        </p>\n      ) : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HeartRateCalculator } from './HeartRateCalculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HeartRateCalculator />\n  </React.StrictMode>,\n  document.getElementById('heart-rate-calculator')\n);\n"],"sourceRoot":""}